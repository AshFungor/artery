#!/usr/bin/env python3

import sys
import copy
import argparse
import subprocess

from pathlib import Path


# Filled by CMake
OPP_RUNALL = '@opp_runall_script@'
OPP_RUN = '@opp_run_executable@'
OPP_RUN_NED_FOLDERS = '@opp_run_ned_folders@'
OPP_RUN_LIBRARIES = '@opp_run_libraries@'


for template, value in copy.copy(globals()).items():
    if not template.startswith('OPP'):
        continue
    if value.startswith('@') or value.endswith('@'):
        raise ValueError(
            f'template variable {template} is left unitialized: {value}'
        )


def main():
    global OPP_RUNALL, OPP_RUN, OPP_DEBUG_RUN, \
        OPP_RUN_NED_FOLDERS, OPP_RUN_LIBRARIES

    parser = argparse.ArgumentParser()

    parser.add_argument('--all', action='store_true', help='sets runall mode')
    parser.add_argument('-b', '--batchsize', dest='batch', action='store')
    parser.add_argument('-j', '--jobs', dest='jobs', action='store')

    args, unrecognized = parser.parse_known_args()

    cmd = []
    working_directory = Path.cwd()

    if args.all:
        cmd.append(OPP_RUNALL)
        if args.batch is not None:
            cmd.extend(['-b', args.batch])
        if args.jobs is not None:
            cmd.extend(['-j', args.jobs])

    cmd.append(OPP_RUN)
    cmd.extend(['-n', OPP_RUN_NED_FOLDERS])
    cmd.extend(OPP_RUN_LIBRARIES.split())
    cmd.extend(unrecognized)

    print('running command: ', ' '.join(cmd))

    sys.exit(subprocess.run(
        cmd,
        cwd=working_directory,
        stderr=sys.stderr,
        stdout=sys.stdout,
        stdin=sys.stdin
    ).returncode)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('exited by user')
